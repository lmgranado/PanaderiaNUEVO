package panaderia.beans;
import java.sql.ResultSet;
import org.displaytag.pagination.PaginatedListTest;
import utils.UtilesDAO;
import utils.Utils;
import java.util.ArrayList;
public class ComposicionFabricacion extends panaderia.beans.entidad.ComposicionFabricacionEntidad
{
  private static final long serialVersionUID = 1L;
  
  public ComposicionFabricacion(){ super(); }

  public static ComposicionFabricacion getComposicionFabricacionByCfId(String cfId)
  {
    ComposicionFabricacion elto = new ComposicionFabricacion();
    elto.consultaReflexiva("SELECT "+ALL_COLUMNS+" FROM composicion_fabricacion WHERE cf_id='"+cfId+"'");
    return elto;
  }

  public static ArrayList getComposicionFabricacionByCfIdStFabricado(String cfIdStFabricado)
  {
    ComposicionFabricacion elto = new ComposicionFabricacion();
    ArrayList lista = elto.consultaAVectorReflexiva("SELECT "+ALL_COLUMNS+",prod_nombre as nombre_prod_usado, fcd.fcd_lote as lote FROM composicion_fabricacion " +
										    		"JOIN stock ON st_id = cf_id_st_usado " +						    				
										    		"JOIN productos ON prod_id = st_prod_id " +
										    		"JOIN facturas_compra_detalle fcd on fcd.fcd_st_id = cf_id_st_usado " +
						    						"WHERE cf_id_st_fabricado='"+cfIdStFabricado+"'");
    return lista;
  }

  public static ComposicionFabricacion getComposicionFabricacionByCfIdStUsado(String cfIdStUsado)
  {
    ComposicionFabricacion elto = new ComposicionFabricacion();
    elto.consultaReflexiva("SELECT "+ALL_COLUMNS+" FROM composicion_fabricacion WHERE cf_id_st_usado='"+cfIdStUsado+"'");
    return elto;
  }

  public static ArrayList getAllComposicionFabricacion()
  {
    ComposicionFabricacion elto = new ComposicionFabricacion();
    ArrayList lista = elto.consultaAVectorReflexiva("SELECT "+ALL_COLUMNS+" FROM composicion_fabricacion");
    return lista;
  }

  protected Object rsToBean(ResultSet rs) throws Exception 
  {
    ComposicionFabricacion composicionfabricacion = new ComposicionFabricacion();
  	try{
    	composicionfabricacion.setCfCantidad(rs.getString(CFCANTIDAD));
    	composicionfabricacion.setCfId(rs.getString(CFID));
    	composicionfabricacion.setCfIdStFabricado(rs.getString(CFIDSTFABRICADO));
    	composicionfabricacion.setCfIdStUsado(rs.getString(CFIDSTUSADO));
  	}catch(Exception e){
  		throw e;
  	}
    	return composicionfabricacion;
  }

  public static Object[] getComposicionFabricacionLista(PaginatedListTest listaPaginada) 
  {
	String sqlAñadido = " ";
	ComposicionFabricacion composicionfabricacion = new ComposicionFabricacion();
	String sql = "SELECT * FROM composicionfabricacion " +
				 " WHERE 1 = 1 ";
  	try{
		ComposicionFabricacion composicionfabricacionFiltro = new ComposicionFabricacion();
		if(listaPaginada.getRequest().getSession().getAttribute("FCOMPOSICIONFABRICACION")!=null){
			composicionfabricacionFiltro = (ComposicionFabricacion)listaPaginada.getRequest().getSession().getAttribute("FCOMPOSICIONFABRICACION");
		}
    	if(!Utils.empty(composicionfabricacionFiltro.getCfCantidad()))
    		sqlAñadido += "AND " + CFCANTIDAD + " = '" + composicionfabricacionFiltro.getCfCantidad() + "'";
    	if(!Utils.empty(composicionfabricacionFiltro.getCfId()))
    		sqlAñadido += "AND " + CFID + " = '" + composicionfabricacionFiltro.getCfId() + "'";
    	if(!Utils.empty(composicionfabricacionFiltro.getCfIdStFabricado()))
    		sqlAñadido += "AND " + CFIDSTFABRICADO + " = '" + composicionfabricacionFiltro.getCfIdStFabricado() + "'";
    	if(!Utils.empty(composicionfabricacionFiltro.getCfIdStUsado()))
    		sqlAñadido += "AND " + CFIDSTUSADO + " = '" + composicionfabricacionFiltro.getCfIdStUsado() + "'";
  	}catch(Exception e){
  		System.out.println(e);
  	}
    return UtilesDAO.generaSqlListadoPaginado(sql + sqlAñadido, listaPaginada, composicionfabricacion);
  }
}
