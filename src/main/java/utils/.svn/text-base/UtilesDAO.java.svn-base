package utils;

import java.util.ArrayList;

import org.displaytag.pagination.PaginatedListTest;
import org.displaytag.properties.SortOrderEnum;

import panaderia.struts.forms.EntidadBean;
import panaderia.utilidades.ClassUtil;


public class UtilesDAO {

	public static Object[] generaSqlListadoPaginado(String sql, PaginatedListTest listadoPaginado, EntidadBean objeto){
        // Tomamos el campo y la dirección de la ordenación
        String campo = listadoPaginado.getSortCriterion();
        SortOrderEnum direccion = listadoPaginado.getSortDirection();
        String strDireccion = " ASC";
        Object[] consulta = new Object[2];
        try{
	        // Comprueba si el paginatedList debe ser vacio
	        if(listadoPaginado.isEmpty()) {
	        	listadoPaginado.setEmpty(false);
	        	listadoPaginado.setList(new ArrayList());                
	        }
	        else {
	            // => Ponemos la ordenación
	            if (campo!=null && !campo.equals("")) {
	            	/*String metodoConstante = ClassUtil.buscaConstanteNueva( objeto.getClass(), campo , direccion.getName() );
	                if (direccion.getName().equals("ascending")) {
	                	strDireccion = "ORDER BY " + metodoConstante + " ASC";
	                }
	                else {
	                	strDireccion = "ORDER BY " + metodoConstante + " DESC";
	                }*/
	            	strDireccion = ClassUtil.buscaConstanteNueva( objeto.getClass(), campo + ",PRIMARY_KEY" , direccion.getName() );
	            }                
	            
	            sql = sql + strDireccion;
	            
	            // => Pillamos la pagina actual y construimos la consulta
	            int primerElto = listadoPaginado.getPageSize() * (listadoPaginado.getIndex());
	            consulta = objeto.consultaAVectorReflexiva(sql,listadoPaginado.getPageSize(),primerElto);
	
	        } 
        }catch(Exception e){
        	System.out.println(e);
        }

		return consulta;
	}	
}
